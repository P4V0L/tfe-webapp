generator client {
  provider = "prisma-client-js"
  // seed     = "npm ts-node prisma/seed.ts" // example custom seed command, remove or comment if not used
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------------------
// Auth.js Models
// --------------------------------
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?

  // NextAuth relationships
  accounts Account[]
  sessions Session[]

  // Custom relationships
  testimonials Testimonial[]
  reviews      ProductReview[]
  orders       Order[]
  cart         Cart? // 1-to-1 relation with Cart (Cart has the FK userId)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --------------------------------
// E-commerce Models
// --------------------------------

// -- Renamed enum variants to Spanish --
enum ProductType {
  ROPA // was CLOTHING
  MERCERIA // was HABERDASHERY
  ROPA_INTERIOR // was UNDERWEAR
  ACCESORIO // was ACCESSORY
  ROPA_DEPORTIVA // was SPORTSWEAR
  PIJAMAS // was HOMEWEAR
}

// -- Example changes to SizeType as well --
enum SizeType {
  TALLAS_ROPA // was CLOTHING_SIZES
  TALLAS_ROPA_INTERIOR // was UNDERWEAR_SIZES
  UNIVERSAL
  CALZADO // was FOOTWEAR
  EDAD // was AGE
}

// -- Example changes to OrderStatus as well --
enum OrderStatus {
  PENDIENTE // was PENDING
  PROCESANDO // was PROCESSING
  ENVIADO // was SHIPPED
  ENTREGADO // was DELIVERED
  CANCELADO // was CANCELLED
  DEVUELTO // was RETURNED
}

model Product {
  id               String      @id @default(cuid())
  name             String      @unique
  description      String?
  basePrice        Float?
  type             ProductType
  slug             String      @unique
  allowedSizeTypes SizeType[]
  specifications   Json? // Customizable attributes

  variants   ProductVariant[]
  images     ProductImage[]
  categories ProductCategory[]
  reviews    ProductReview[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariant {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String

  // Optional references
  size    Size?   @relation(fields: [sizeId], references: [id])
  sizeId  String?
  color   Color?  @relation(fields: [colorId], references: [id])
  colorId String?

  stock        Int     @default(0)
  price        Float?
  sku          String? @unique
  measurements String? // e.g., "15mm", "2m"

  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Color {
  id      String @id @default(cuid())
  name    String @unique
  hexCode String

  variants  ProductVariant[]
  OrderItem OrderItem[]
}

model Size {
  id        String           @id @default(cuid())
  value     String           @unique
  type      SizeType
  variants  ProductVariant[]
  OrderItem OrderItem[]
}

model Category {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?

  // Self-relation for hierarchical categories
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  parentId String?
  children Category[] @relation("CategoryHierarchy")

  products ProductCategory[]

  createdAt DateTime @default(now())
}

model ProductCategory {
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@id([productId, categoryId])
}

model ProductImage {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  url       String
  altText   String?
  order     Int

  createdAt DateTime @default(now())
}

model Order {
  id              String      @id @default(cuid())
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  status          OrderStatus @default(PENDIENTE)
  subtotal        Float       @default(0)
  tax             Float       @default(0)
  shippingCost    Float       @default(0)
  discount        Float       @default(0)
  totalAmount     Float
  shippingAddress Json?
  billingAddress  Json?
  items           OrderItem[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id      String @id @default(cuid())
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  productId       String
  name            String
  image           String
  color           Color  @relation(fields: [colorId], references: [id])
  size            Size?  @relation(fields: [sizeId], references: [id])
  priceAtPurchase Float
  quantity        Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  colorId   String
  sizeId    String?
}

model Testimonial {
  id       String  @id @default(cuid())
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  content  String
  rating   Int     @default(5)
  approved Boolean @default(false)

  createdAt DateTime @default(now())
}

model ProductReview {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  rating  Int
  comment String?

  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model Cart {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  items CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id               String         @id @default(cuid())
  cart             Cart           @relation(fields: [cartId], references: [id])
  cartId           String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId String
  quantity         Int            @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productVariantId])
}
